{"version":3,"sources":["components/columns.js","components/Checkbox.js","components/RowSelection.js","App.js","reportWebVitals.js","index.js"],"names":["COLUMNS","Header","Footer","accessor","disableFilters","sticky","Checkbox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","type","RowSelection","columns","useMemo","data","CARD_DATA","useTable","useRowSelect","hooks","visibleColumns","push","id","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","listOfCards","slice","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","JSON","stringify","original","onClick","console","log","axios","post","then","response","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"imHAEaA,EAAU,CACrB,CACEC,OAAQ,KACRC,OAAQ,KACRC,SAAU,KACVC,gBAAgB,EAChBC,OAAQ,QAEV,CACEJ,OAAQ,YACRC,OAAQ,YACRC,SAAU,YACVE,OAAQ,QAQV,CACEJ,OAAQ,YACRC,OAAQ,YACRC,SAAU,aAEZ,CACEF,OAAQ,SACRC,OAAQ,SACRC,SAAU,UAEZ,CACEF,OAAQ,SACRC,OAAQ,SACRC,SAAU,W,2CCjCDG,EAAWC,IAAMC,YAAW,WAA6BC,GAAS,IAAnCC,EAAkC,EAAlCA,cAAkBC,EAAgB,iBACtEC,EAAaL,IAAMM,SACnBC,EAAcL,GAAOG,EAM3B,OAJAL,IAAMQ,WAAU,WACdD,EAAYE,QAAQN,cAAgBA,IACnC,CAACI,EAAaJ,IAGf,mCACE,mCAAOO,KAAK,WAAWR,IAAKK,GAAiBH,S,iBCHtCO,EAAe,WAC1B,IAAMC,EAAUC,mBAAQ,kBAAMpB,IAAS,IACjCqB,EAAOD,mBAAQ,kBAAME,IAAW,IAStC,MAOIC,mBACF,CACEJ,UACAE,QAEFG,gBACA,SAAAC,GACEA,EAAMC,eAAeC,MAAK,SAAAR,GAAO,OAC/B,CACES,GAAI,YACJ3B,OAAQ,gBAAG4B,EAAH,EAAGA,8BAAH,OACN,cAACvB,EAAD,eAAcuB,OAEhBC,KAAM,gBAAGC,EAAH,EAAGA,IAAH,OAAa,cAACzB,EAAD,eAAcyB,EAAIC,iCANR,mBAQ5Bb,UArBPc,EADF,EACEA,cACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,KACAC,EALF,EAKEA,WACAC,EANF,EAMEA,iBAqBIC,EAAcH,EAAKI,MAAM,EAAG,IAElC,OACE,qCACE,kDAAWP,KAAX,cACE,gCACGE,EAAaM,KAAI,SAAAC,GAAW,OAC3B,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC7B,8CAAQA,EAAOC,kBAAf,aAAkCD,EAAOE,OAAO,wBAKxD,iDAAWb,KAAX,aACGK,EAAYE,KAAI,SAAAV,GAEf,OADAM,EAAWN,GAET,8CAAQA,EAAIiB,eAAZ,aACGjB,EAAIkB,MAAMR,KAAI,SAAAS,GACb,OAAO,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKH,OAAO,2BAQ7D,8BACE,+BACGK,KAAKC,UACJ,CACEf,iBAAkBA,EAAiBG,KAAI,SAAAV,GAAG,OAAIA,EAAIuB,aAEpD,KACA,OAIN,wBAAQC,QAzEZ,WACEC,QAAQC,IAAI,kBACZC,IAAMC,KAAK,kCAAmCrB,EAAiBG,KAAI,SAAAV,GAAG,OAAIA,EAAIuB,aAAWM,MAAK,SAAUC,GACpGL,QAAQC,IAAII,OAsEd,6BC1ESC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASzB,OACP,cAAC,IAAM0B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.2f5bb106.chunk.js","sourcesContent":["import { format } from 'date-fns'\n\nexport const COLUMNS = [\n  {\n    Header: 'Id',\n    Footer: 'Id',\n    accessor: 'id',\n    disableFilters: true,\n    sticky: 'left'\n  },\n  {\n    Header: 'Card Name',\n    Footer: 'Card Name',\n    accessor: 'card_name',\n    sticky: 'left'\n  },\n  // {\n  //   Header: 'Type',\n  //   Footer: 'Type',\n  //   accessor: 'type',\n  //   sticky: 'left'\n  // },\n  {\n    Header: 'Mana Cost',\n    Footer: 'Mana Cost',\n    accessor: 'mana_cost'\n  },\n  {\n    Header: 'Attack',\n    Footer: 'Attack',\n    accessor: 'attack'\n  },\n  {\n    Header: 'Health',\n    Footer: 'Health',\n    accessor: 'health'\n  },\n  // {\n  //   Header: 'Durability',\n  //   Footer: 'Durability',\n  //   accessor: 'durability'\n  // },\n]\n\nexport const GROUPED_COLUMNS = [\n  {\n    Header: 'Id',\n    Footer: 'Id',\n    accessor: 'id'\n  },\n  {\n    Header: 'Name',\n    Footer: 'Name',\n    columns: [\n      {\n        Header: 'First Name',\n        Footer: 'First Name',\n        accessor: 'first_name'\n      },\n      {\n        Header: 'Last Name',\n        Footer: 'Last Name',\n        accessor: 'last_name'\n      }\n    ]\n  },\n  {\n    Header: 'Info',\n    Footer: 'Info',\n    columns: [\n      {\n        Header: 'Date of Birth',\n        Footer: 'Date of Birth',\n        accessor: 'date_of_birth'\n      },\n      {\n        Header: 'Country',\n        Footer: 'Country',\n        accessor: 'country'\n      },\n      {\n        Header: 'Phone',\n        Footer: 'Phone',\n        accessor: 'phone'\n      }\n    ]\n  }\n]","import React from 'react'\n\nexport const Checkbox = React.forwardRef(({ indeterminate, ...rest }, ref) => {\n  const defaultRef = React.useRef()\n  const resolvedRef = ref || defaultRef\n\n  React.useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate\n  }, [resolvedRef, indeterminate])\n\n  return (\n    <>\n      <input type='checkbox' ref={resolvedRef} {...rest} />\n    </>\n  )\n})\n","import React, { useMemo } from 'react'\nimport ReactTable from 'react-table'\nimport { useTable, useRowSelect } from 'react-table'\nimport CARD_DATA from './carddata.json'\nimport { COLUMNS } from './columns'\nimport './table.css'\nimport { Checkbox } from './Checkbox'\nimport axios from 'axios'\n\nexport const RowSelection = () => {\n  const columns = useMemo(() => COLUMNS, [])\n  const data = useMemo(() => CARD_DATA, [])\n\n  function handleClick() {\n    console.log(\"Button Clicked\");\n    axios.post('http://localhost:8080/game/deck', selectedFlatRows.map(row => row.original)).then(function (response) {\n        console.log(response);\n      })\n  }\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows // gives flat array of rows that are selected\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useRowSelect,\n    hooks => {\n      hooks.visibleColumns.push(columns => [\n        {\n          id: 'selection',\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <Checkbox {...getToggleAllRowsSelectedProps()} />\n          ),\n          Cell: ({ row }) => <Checkbox {...row.getToggleRowSelectedProps()} />\n        },\n        ...columns\n      ])\n    }\n  )\n\n  const listOfCards = rows.slice(0, 30) // 30 data rows\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {listOfCards.map(row => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n\n      <pre> \n        <code>\n          {JSON.stringify( \n            { // printing each selected row to the browser\n              selectedFlatRows: selectedFlatRows.map(row => row.original)\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n      <button onClick={handleClick}>Submit Deck</button>\n    </>\n    \n  )\n}","import React from 'react'\nimport './App.css'\nimport { RowSelection } from './components/RowSelection'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <RowSelection />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}