{"ast":null,"code":"var _jsxFileName = \"/home/pranav/git-repos/deck-edit/src/components/RowSelection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from 'react';\nimport ReactTable from 'react-table';\nimport { useTable, useRowSelect } from 'react-table';\nimport CARD_DATA from './carddata.json';\nimport { COLUMNS } from './columns';\nimport './table.css';\nimport { Checkbox } from './Checkbox';\nimport axios from 'axios';\nimport index from '../index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const RowSelection = _ref => {\n  _s();\n\n  let {\n    childToParent\n  } = _ref;\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => CARD_DATA, []);\n  const dataToSend = \"This is data from Child Component to the Parent Component.\";\n\n  function handleClick() {\n    console.log(selectedFlatRows.map(row => row.original));\n    console.log(\"Button Clicked\");\n    axios.post('http://localhost:8080/game/games/deck', selectedFlatRows.map(row => row.original)).then(function (response) {\n      console.log(response.data.uuid);\n      childToParent(response.data.uuid);\n    });\n    axios.get('http://localhost:8080/game/users/garg.pranav@gmail.com').then(function (response) {\n      console.log(response);\n    }); //axios.get('http://localhost:8080/game').then(function (response) { console.log(response.uuid)} );\n  }\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows // gives flat array of rows that are selected\n\n  } = useTable({\n    columns,\n    data\n  }, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [{\n      id: 'selection',\n      Header: _ref2 => {\n        let {\n          getToggleAllRowsSelectedProps\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Checkbox, { ...getToggleAllRowsSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this);\n      },\n      Cell: _ref3 => {\n        let {\n          row\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(Checkbox, { ...row.getToggleRowSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 30\n        }, this);\n      }\n    }, ...columns]);\n  });\n  const listOfCards = rows.slice(0, 30); // 30 data rows\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: listOfCards.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 26\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: JSON.stringify({\n          // printing each selected row to the browser\n          selectedFlatRows: selectedFlatRows.map(row => row.original)\n        }, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Submit Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RowSelection, \"92m4lLs4pfWe+/UwjNkjAG+y1Rw=\", false, function () {\n  return [useTable];\n});\n\n_c = RowSelection;\n\nvar _c;\n\n$RefreshReg$(_c, \"RowSelection\");","map":{"version":3,"sources":["/home/pranav/git-repos/deck-edit/src/components/RowSelection.js"],"names":["React","useMemo","useState","ReactTable","useTable","useRowSelect","CARD_DATA","COLUMNS","Checkbox","axios","index","RowSelection","childToParent","columns","data","dataToSend","handleClick","console","log","selectedFlatRows","map","row","original","post","then","response","uuid","get","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","hooks","visibleColumns","push","id","Header","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","listOfCards","slice","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react'\nimport ReactTable from 'react-table'\nimport { useTable, useRowSelect } from 'react-table'\nimport CARD_DATA from './carddata.json'\nimport { COLUMNS } from './columns'\nimport './table.css'\nimport { Checkbox } from './Checkbox'\nimport axios from 'axios'\nimport index from '../index'\n\n\n\n\nexport const RowSelection = ({childToParent}) => {\n  const columns = useMemo(() => COLUMNS, [])\n  const data = useMemo(() => CARD_DATA, [])\n \n  const dataToSend = \"This is data from Child Component to the Parent Component.\"\n  \n\n  function handleClick() {\n    console.log(selectedFlatRows.map(row => row.original));\n    \n    console.log(\"Button Clicked\");\n    axios.post('http://localhost:8080/game/games/deck', selectedFlatRows.map(row => row.original)).then(function (response) {\n        console.log(response.data.uuid);\n        childToParent(response.data.uuid);\n        \n        \n        \n      })\n    axios.get('http://localhost:8080/game/users/garg.pranav@gmail.com').then(function (response) { console.log(response)} );\n    //axios.get('http://localhost:8080/game').then(function (response) { console.log(response.uuid)} );\n    \n   \n    \n    \n    \n    \n  }\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows // gives flat array of rows that are selected\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useRowSelect,\n    hooks => {\n      hooks.visibleColumns.push(columns => [\n        {\n          id: 'selection',\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <Checkbox {...getToggleAllRowsSelectedProps()} />\n          ),\n          Cell: ({ row }) => <Checkbox {...row.getToggleRowSelectedProps()} />\n        },\n        ...columns\n      ])\n    }\n  )\n\n  const listOfCards = rows.slice(0, 30) // 30 data rows\n\n \n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {listOfCards.map(row => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n\n      <pre> \n        <code>\n          {JSON.stringify( \n            { // printing each selected row to the browser\n              selectedFlatRows: selectedFlatRows.map(row => row.original)\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n      <button onClick={handleClick}>Submit Deck</button>\n    </>\n    \n  )\n         \n}"]},"metadata":{},"sourceType":"module"}