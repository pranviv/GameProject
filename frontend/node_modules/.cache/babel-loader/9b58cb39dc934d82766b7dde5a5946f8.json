{"ast":null,"code":"import _objectSpread from\"/home/pranav/git-repos/deck-edit/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/home/pranav/git-repos/deck-edit/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React,{useMemo,useState}from'react';import ReactTable from'react-table';import{useTable,useRowSelect}from'react-table';import CARD_DATA from'./carddata.json';import{COLUMNS}from'./columns';import'./table.css';import{Checkbox}from'./Checkbox';import axios from'axios';import index from'../index';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var RowSelection=function RowSelection(_ref){var childToParent=_ref.childToParent;var columns=useMemo(function(){return COLUMNS;},[]);var data=useMemo(function(){return CARD_DATA;},[]);var dataToSend=\"This is data from Child Component to the Parent Component.\";function handleClick(){console.log(selectedFlatRows.map(function(row){return row.original;}));console.log(\"Button Clicked\");axios.post('http://localhost:8080/game/games/deck',selectedFlatRows.map(function(row){return row.original;})).then(function(response){console.log(response.data.uuid);childToParent(response.data.uuid);});axios.get('http://localhost:8080/game/users/garg.pranav@gmail.com').then(function(response){console.log(response);});//axios.get('http://localhost:8080/game').then(function (response) { console.log(response.uuid)} );\n}var _useTable=useTable({columns:columns,data:data},useRowSelect,function(hooks){hooks.visibleColumns.push(function(columns){return[{id:'selection',Header:function Header(_ref2){var getToggleAllRowsSelectedProps=_ref2.getToggleAllRowsSelectedProps;return/*#__PURE__*/_jsx(Checkbox,_objectSpread({},getToggleAllRowsSelectedProps()));},Cell:function Cell(_ref3){var row=_ref3.row;return/*#__PURE__*/_jsx(Checkbox,_objectSpread({},row.getToggleRowSelectedProps()));}}].concat(_toConsumableArray(columns));});}),getTableProps=_useTable.getTableProps,getTableBodyProps=_useTable.getTableBodyProps,headerGroups=_useTable.headerGroups,rows=_useTable.rows,prepareRow=_useTable.prepareRow,selectedFlatRows=_useTable.selectedFlatRows;var listOfCards=rows.slice(0,30);// 30 data rows\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"table\",_objectSpread(_objectSpread({},getTableProps()),{},{children:[/*#__PURE__*/_jsx(\"thead\",{children:headerGroups.map(function(headerGroup){return/*#__PURE__*/_jsx(\"tr\",_objectSpread(_objectSpread({},headerGroup.getHeaderGroupProps()),{},{children:headerGroup.headers.map(function(column){return/*#__PURE__*/_jsx(\"th\",_objectSpread(_objectSpread({},column.getHeaderProps()),{},{children:column.render('Header')}));})}));})}),/*#__PURE__*/_jsx(\"tbody\",_objectSpread(_objectSpread({},getTableBodyProps()),{},{children:listOfCards.map(function(row){prepareRow(row);return/*#__PURE__*/_jsx(\"tr\",_objectSpread(_objectSpread({},row.getRowProps()),{},{children:row.cells.map(function(cell){return/*#__PURE__*/_jsx(\"td\",_objectSpread(_objectSpread({},cell.getCellProps()),{},{children:cell.render('Cell')}));})}));})}))]})),/*#__PURE__*/_jsx(\"pre\",{children:/*#__PURE__*/_jsx(\"code\",{children:JSON.stringify({// printing each selected row to the browser\nselectedFlatRows:selectedFlatRows.map(function(row){return row.original;})},null,2)})}),/*#__PURE__*/_jsx(\"button\",{onClick:handleClick,children:\"Submit Deck\"})]});};","map":{"version":3,"sources":["/home/pranav/git-repos/deck-edit/src/components/RowSelection.js"],"names":["React","useMemo","useState","ReactTable","useTable","useRowSelect","CARD_DATA","COLUMNS","Checkbox","axios","index","RowSelection","childToParent","columns","data","dataToSend","handleClick","console","log","selectedFlatRows","map","row","original","post","then","response","uuid","get","hooks","visibleColumns","push","id","Header","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","listOfCards","slice","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react'\nimport ReactTable from 'react-table'\nimport { useTable, useRowSelect } from 'react-table'\nimport CARD_DATA from './carddata.json'\nimport { COLUMNS } from './columns'\nimport './table.css'\nimport { Checkbox } from './Checkbox'\nimport axios from 'axios'\nimport index from '../index'\n\n\n\n\nexport const RowSelection = ({childToParent}) => {\n  const columns = useMemo(() => COLUMNS, [])\n  const data = useMemo(() => CARD_DATA, [])\n \n  const dataToSend = \"This is data from Child Component to the Parent Component.\"\n  \n\n  function handleClick() {\n    console.log(selectedFlatRows.map(row => row.original));\n    \n    console.log(\"Button Clicked\");\n    axios.post('http://localhost:8080/game/games/deck', selectedFlatRows.map(row => row.original)).then(function (response) {\n        console.log(response.data.uuid);\n        childToParent(response.data.uuid);\n        \n        \n        \n      })\n    axios.get('http://localhost:8080/game/users/garg.pranav@gmail.com').then(function (response) { console.log(response)} );\n    //axios.get('http://localhost:8080/game').then(function (response) { console.log(response.uuid)} );\n    \n   \n    \n    \n    \n    \n  }\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows // gives flat array of rows that are selected\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useRowSelect,\n    hooks => {\n      hooks.visibleColumns.push(columns => [\n        {\n          id: 'selection',\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <Checkbox {...getToggleAllRowsSelectedProps()} />\n          ),\n          Cell: ({ row }) => <Checkbox {...row.getToggleRowSelectedProps()} />\n        },\n        ...columns\n      ])\n    }\n  )\n\n  const listOfCards = rows.slice(0, 30) // 30 data rows\n\n \n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {listOfCards.map(row => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n\n      <pre> \n        <code>\n          {JSON.stringify( \n            { // printing each selected row to the browser\n              selectedFlatRows: selectedFlatRows.map(row => row.original)\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n      <button onClick={handleClick}>Submit Deck</button>\n    </>\n    \n  )\n         \n}"]},"metadata":{},"sourceType":"module"}